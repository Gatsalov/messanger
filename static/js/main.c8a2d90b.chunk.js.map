{"version":3,"sources":["generateFakeData/staticData.js","reducers/user.js","reducers/contacts.js","constants/action-types.js","reducers/index.js","reducers/messages.js","reducers/typing.js","reducers/activeUserId.js","store/index.js","actions/index.js","containers/User.js","components/Sidebar.js","components/Empty.js","components/Header.js","components/Chats.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","state","arguments","undefined","reducers_contacts","SET_TYPING_VALUE","SEND_MESSAGE","test","console","log","combineReducers","action","type","_action$payload","payload","message","userId","allUserMsgs","keys","pop","defineProperty","typing","activeUserId","store","createStore","reducer","setActiveUserId","id","handleUserClick","_ref2","dispatch","User","_ref","react_default","a","createElement","className","onClick","bind","src","alt","Sidebar","map","contact","src_containers_User","key","Empty","first_name","split","Header","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","Chats_Chat","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","target","placeholder","ChatWindow","activeUser","activeMsgs","components_Header","src_components_Chats","values","src_containers_MessageInput","Main","src_containers_ChatWindow","Empty_Empty","App","_store$getState","src_components_Sidebar","src_components_Main","Boolean","window","location","hostname","match","render","ReactDOM","containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8a2d90b.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","import { generateUser } from \"../generateFakeData/staticData\";\n\n\nexport default function user(state = generateUser(), action) {\n    return state;\n}","import { contacts } from '../generateFakeData/staticData';\n\nexport default (state = contacts , action)=>{\n  return state;\n}","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";","import user from \"./user\";\nimport contacts from \"./contacts\";\nimport activeUserId from \"./activeUserId\";\nimport { combineReducers } from \"redux\";\nimport messages from \"./messages\";\nimport typing from \"./typing\";\n\nconst test = { user, contacts }\nconsole.log(test,\"ZXCVBNM<\")\n\nexport default combineReducers(\n  {\n    user,\n    contacts,\n    messages,\n    typing,\n    activeUserId\n  }\n);","import { getMessages } from \"../generateFakeData/staticData\";\nimport { SEND_MESSAGE } from \"../constants/action-types\";\nimport _ from 'lodash';\n\nexport default function messages(state = getMessages(10), action) {\n  switch (action.type) {  \n    case SEND_MESSAGE:\n      const { message, userId } = action.payload;\n      const allUserMsgs = state[userId];\n      const number = +_.keys(allUserMsgs).pop() + 1;\n      return {\n        ...state,\n        [userId]: {\n          ...allUserMsgs,\n          [number]: {\n            number,\n            text: message,\n            is_user_msg: true\n          }\n        } \n      };\n    default:\n      return state;\n  }\n}","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-types\";\n\nexport default function typing(state = \"\", action) {\n  switch (action.type) {\n    case SET_TYPING_VALUE:\n      return action.payload;\n    case SEND_MESSAGE:\n      return \"\";\n    default:\n      return state;\n  }\n}","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\n\nexport default (state = null, action)=>{\n  // debugger\n  switch(action.type){\n    case SET_ACTIVE_USER_ID: \n      return action.payload;\n    default: \n      return state;\n  }\n}","import { createStore } from 'redux';\nimport reducer from '../reducers';\n// debugger\nconst store = createStore(reducer);\nexport default store;","import {  SET_ACTIVE_USER_ID, SET_TYPING_VALUE, SEND_MESSAGE } from '../constants/action-types';\n\nexport const setActiveUserId = id => ({\n    type: SET_ACTIVE_USER_ID,\n    payload: id\n});\n\nexport const setTypingValue = value => ({\n    type: SET_TYPING_VALUE,\n    payload: value\n});\n\nexport const sendMessage = (message, userId) => ({\n    type: SEND_MESSAGE,\n    payload: {\n      message,\n      userId \n  }\n})","import React from 'react';\nimport './User.css';\nimport store from \"../store\";\nimport { setActiveUserId } from \"../actions\";\n\nconst User = ({ user }) => {\n  const { name, profile_pic, status } = user;\n  return (\n      <div className=\"User\" onClick={handleUserClick.bind(null,user)}>\n        <img src={ profile_pic } alt={ name } className=\"User__pic\"/>\n        <div className=\"User__details\">\n          <p className=\"User__details-name\">{ name }</p>\n          <p className=\"User__details-status\">{ status }</p>\n        </div>\n      </div>\n    )\n}\nfunction handleUserClick({ user_id }) {\n  console.log(user_id)\n  store.dispatch(setActiveUserId(user_id));\n}\nexport default User;","import React from 'react';\nimport User from '../containers/User';\n\nimport './Sidebar.css';\nconst Sidebar = ({ contacts })=>{\n\n  return (\n    <aside className=\"Sidebar\">\n      { contacts.map(contact => <User user={contact}\n        key={contact.user_id}/>)}\n    </aside>\n    )\n}\n\nexport default Sidebar;","import React from 'react';\nimport './Empty.css'\n\nexport default function Empty ({ user }){\n  const { name, profile_pic, status } = user;\n  const first_name = name.split(\" \")[0];\n\n  return (\n      <div className=\"Empty\">\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\n      <p className=\"Empty__status\">\n         <b>Status:</b> {status}\n      </p>\n      {/*<button className=\"Empty__btn\">Start a conversation</button>*/}\n      <p className=\"Empty__info\">\n      Click on contact to start conversation\n        {/*Search for someone to start chatting with or go to Contacts to see who is available*/}\n      </p>\n      </div>\n    )\n}","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header({ user }) {\n   const { name, status } = user;\n   return (\n    <header className=\"Header\">\n       <h1 className=\"Header__name\">{name}</h1>\n       <p className=\"Header__status\">{status}</p>\n    </header> );\n}\nexport default Header;","import React, { Component } from \"react\";\nimport \"./Chats.css\";\n\nconst Chat = ({ message }) => {\n  const { text, is_user_msg } = message;\n  return (\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}\n    </span>\n  ); \n};\n\n\n\nclass Chats extends Component {\n\n  constructor(props) {\n    super(props);\n    this.chatsRef = React.createRef();\n  }\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    this.chatsRef.current.scrollTop =\n    this.chatsRef.current.scrollHeight;\n  };\n\n  render() {\n    return (\n      <div className=\"Chats\" ref={this.chatsRef}>\n        {this.props.messages.map(message => (\n          <Chat message={message} key={message.number} />))} \n      </div>\n    ); \n  }\n}\n\nexport default Chats;","import React from \"react\";\nimport store from \"../store\";\nimport { setTypingValue, sendMessage } from \"../actions\";\nimport \"./MessageInput.css\";\n\n\n\n\nconst MessageInput = ({ value }) => {\n  const state = store.getState();\n  \n  const handleSubmit = e => {\n      e.preventDefault();\n      const { typing, activeUserId } = state;\n      store.dispatch(sendMessage(typing, activeUserId));\n  };\n\n\n  const handleChange = e => {\n      store.dispatch(setTypingValue(e.target.value));\n      console.log(state,'ASDFGHJKL:')\n  };\n  \n  return (\n    <form className=\"Message\" onSubmit={handleSubmit}>\n      <input\n        className=\"Message__input\"\n        onChange={handleChange}\n        value={value}\n        placeholder=\"write a message\"/> \n    </form>\n  ); \n};\n\nexport default MessageInput;\n","import React from \"react\";\nimport store from \"../store\";\nimport Header from \"../components/Header\";\nimport Chats from \"../components/Chats\";\nimport \"./ChatWindow.css\";\nimport _ from \"lodash\";\nimport MessageInput from \"./MessageInput\";\n\n\nconst ChatWindow = ({ activeUserId }) => {\n  const state = store.getState();\n  // debugger\n  const { typing } = state;\n  const activeUser = state.contacts[activeUserId];\n  const activeMsgs = state.messages[activeUserId];\n  return (\n    <div className=\"ChatWindow\">\n      <Header user={activeUser} />\n      <Chats messages={_.values(activeMsgs)} />\n      <MessageInput value={typing} />\n    </div>\n  ); \n};\n\nexport default ChatWindow;","import React from \"react\";\nimport \"./Main.css\";\nimport Empty from \"./Empty\";\nimport ChatWindow from \"../containers/ChatWindow\";\n\n\nconst Main = ({ user, activeUserId }) => {\n  const renderMainContent = () => {\n     if (!activeUserId) {\n        return <Empty user={user} activeUserId={activeUserId} />;\n     } else {\n        return <ChatWindow activeUserId={activeUserId} />;\n     }\n  };\n   return <main className=\"Main\">{renderMainContent()}</main>;\n};\n   export default Main;","import React from 'react';\nimport Sidebar from '../components/Sidebar';\nimport Main from '../components/Main';\nimport './App.css';\nimport store from '../store';\nimport _ from 'lodash';\n\n// console.log(store.getState(),\"APP ++++++++++\")\nfunction App() {\n  const { contacts, user, activeUserId  } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)}/>\n      <Main user={user} activeUserId={activeUserId}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nfunction fancyLog() {\n    console.log(\"%c Rendered with \", \" background: purple; color: #FFF\");\n    console.log(store.getState());\n    console.log('store.getState()');\n   }\nconst render = ()=> {\n  fancyLog();\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\nstore.subscribe(render);\nrender();\n\nserviceWorker.unregister();\n"],"sourceRoot":""}